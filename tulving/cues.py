# cues.py -- The Turing Complete LLM project
# Tuesday, January 23, 2024

# From manual selection in the org file generated by `words.py',
# create batches of prompts for recognition ("reco") and recall
# ("reca") tests.

import pickle
import numpy as np

# Not to be remembered (from Bing on Sunday, January 21, 2024)
NTBR_WORDS = [ 'abrupt', 'bloom', 'braid', 'cactus', 'caterpillar', 'daisy', 'ditch', 'dove', 'frost', 'giraffe', 'hedge', 'jazz', 'lighthouse', 'mango', 'ocean', 'penguin' ]

# TBR words ( COPY, NCAW, NCRW )
TBR_WORDS = [
    ('free', 'liberal', 'three'),
    ('sleet', 'icy', 'fleet' ), 
    ('small', 'tiny', 'shawl'),
    ('produce', 'farming', 'reduce'),
    ('grape', 'wine', 'drape'),
    ('cobweb', 'spider', 'web'),
    ('library', 'books', 'arbitrary'),
    ('chair', 'seat', 'stair'),
    ('walk', 'stroll', 'talk'),
    ('cart', 'wheelbarrow', 'dart'),
    ('stitch', 'sew', 'switch'),
    ('side', 'flank', 'ride'),
    ('locket', 'pendant', 'rocket'),
    ('move', 'action', 'groove'),
    ('egg', 'ovum', 'peg'),
    ('sneeze', 'cold', 'tease'),
    ('faucet', 'tap', 'trinket'),
    ('volcano', 'eruption', 'chicano'),
    ('toy', 'plaything', 'joy'),
    ('mass', 'weight', 'grass'),
    ('recess', 'retreat', 'express'),
    ('bead', 'string', 'head'),
    ('ant', 'fly', 'coolant'),
    ('cover', 'conceal', 'clover'),
    ('hen', 'chicken', 'yen'),
    ('hat', 'cap', 'fat'),
    ('pet', 'love', 'set'),
    ('map', 'cartography', 'lap'),
    ('control', 'power', 'enroll'),
    ('pain', 'agony', 'vein'),
    ('cushion', 'comfort', 'fashion'),
    ('monkey', 'ape', 'honky'),
    ('vegetable', 'fruit', 'tolerable'),
    ('day', 'sunlight', 'ray'),
    ('curtain', 'drape', 'stain'),
    ('kitten', 'adorable', 'written'),
    ('copper', 'bronze', 'proper'),
    ('basin', 'bowl', 'satin'),
    ('ball', 'sphere', 'mall'),
    ('net', 'web', 'debt'),
    ('card', 'play', 'yard'),
    ('cake', 'dessert', 'lake'),
    ('stop', 'halt', 'mop'),
    ('guitar', 'banjo', 'avatar'),
    ('value', 'worth', 'rescue'),
    ('star', 'shine', 'tsar'),
    ('list', 'catalog', 'mist'),
    ('arm', 'leg', 'swarm')
]

# Sanity tests
def test_unicity( lst ):
    uniques, counts = np.unique( lst, return_counts = True )
    return all( counts == 1 )


def test_TBR():
    global TEMPL_MEMO, TBR_WORDS, NTBR_WORDS
    # Size
    assert 48 == len(TBR_WORDS)
    assert 16 == len(NTBR_WORDS)
    # Duplicates
    base = [ w for ( w, ncaw, ncrw ) in TBR_WORDS ]
    assert test_unicity( base ), "Base words has duplicates." 
    assert test_unicity( base + [ ncaw for ( w, ncaw, ncrw ) in TBR_WORDS ] ), "Base/NCAW duplicates;"
    assert test_unicity( base + [ ncrw for ( w, ncaw, ncrw ) in TBR_WORDS ] ), "Base/NCRW duplicates;"
    ntbr_base = NTBR_WORDS
    assert test_unicity( ntbr_base ); "NTBR Duplicates."
    assert test_unicity( ntbr_base + [ ncaw for ( w, ncaw, ncrw ) in TBR_WORDS ] ), "NTBR/NCAW duplicates;"
    assert test_unicity( ntbr_base + [ ncrw for ( w, ncaw, ncrw ) in TBR_WORDS ] ), "NTBR/NCRW duplicates;"

# Protocol
def protocol_cuesheets():
    global TEMPL_MEMO, TBR_WORDS, NTBR_WORDS
    TBRl, NTBRl = len( TBR_WORDS ), len( NTBR_WORDS )
    permute_tbr, permute_ntbr = np.random.permutation( TBRl ), np.random.permutation( NTBRl )
    tbr_reco = [ TBR_WORDS[i]  for i in permute_tbr[: (TBRl//2)] ]
    tbr_reca = [ TBR_WORDS[i]  for i in permute_tbr[(TBRl//2):] ]
    # Build cuesheets
    cs_reco  = [ (w, w, 'copy') for ( w, ncaw, ncrw ) in tbr_reco[:8] ] + [ (w, ncaw, 'ncaw') for ( w, ncaw, ncrw ) in tbr_reco[8:16] ] + [ (w, ncrw, 'ncrw') for ( w, ncaw, ncrw ) in tbr_reco[16:] ] + [ ( None, NTBR_WORDS[i], 'none' ) for i in permute_ntbr[:8] ]
    #
    cs_reca  = [ (w, w, 'copy') for ( w, ncaw, ncrw ) in tbr_reca[:8] ] + [ (w, ncaw, 'ncaw') for ( w, ncaw, ncrw ) in tbr_reca[8:16] ] + [ (w, ncrw, 'ncrw') for ( w, ncaw, ncrw ) in tbr_reca[16:] ] + [ ( None, NTBR_WORDS[i], 'none' ) for i in permute_ntbr[8:] ]
    assert 32 == len( cs_reco )
    assert 32 == len( cs_reca )
    # Shuffle
    permute_cso, permute_csa = np.random.permutation( 32 ), np.random.permutation( 32 )
    cso, csa = [ cs_reco[i] for i in permute_cso ], [ cs_reca[i] for i in permute_csa ]
    return cso, csa

def main():
    test_TBR()
    words = [ w for ( w, ncaw, ncrw ) in TBR_WORDS ]
    with open( 'words_test.pickle', 'wb' ) as f:
        pickle.dump( words, f, pickle.HIGHEST_PROTOCOL )
    cso, csa = protocol_cuesheets()
    with open( 'cues_half_1.pickle', 'wb' ) as f:
        pickle.dump( cso, f, pickle.HIGHEST_PROTOCOL )
    with open( 'cues_half_2.pickle', 'wb' ) as f:
        pickle.dump( csa, f, pickle.HIGHEST_PROTOCOL )
        

if __name__ == '__main__':
    main()
